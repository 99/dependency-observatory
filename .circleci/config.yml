# These environment variables must be set in CircleCI UI
#
# DOCKERHUB_REPO - docker hub repo, format: <username>/<repo>
# DOCKER_USER
# DOCKER_PASS
#
version: 2.1
# orbs:
#   kube-orb: circleci/kubernetes@0.11.0
jobs:
  check-format:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - run:
          name: install python deps
          command: |
            pip config --user set global.progress_bar off
            pip install --user "$(grep black depobs/requirements-dev.txt)"
      - run:
          name: check code is formatted with black and output diff
          command: |
            black --config pyproject.toml --diff .
            black --config pyproject.toml --check .

  check-types:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - run:
          name: install python deps
          command: |
            pip config --user set global.progress_bar off
            # unquoted grep so we install mypy and mypy extensions
            pip install --user $(grep mypy depobs/requirements-dev.txt)
      - run:
          name: check code is properly typed
          command: |
            mypy --config setup.cfg

  unit-test:
    docker:
      - image: circleci/python:buster
    environment:
      SQLALCHEMY_DATABASE_URI: postgresql+psycopg2://postgres:postgres@db/dependency_observatory
      INIT_DB: 0
      CELERY_BROKER_URL: sqla+postgresql://postgres:postgres@db/dependency_observatory
      CELERY_RESULT_BACKEND: db+postgresql://postgres:postgres@db/dependency_observatory
    steps:
      - checkout
      - run:
          name: install coveralls
          command: pip install --user coveralls
      - run:
          name: write a version.json to CWD
          command: |
            CI=1 ./util/write_version_json.sh > version.json
      - run:
          name: install python deps
          command: |
            pip config --user set global.progress_bar off
            pip install --user -r depobs/requirements.txt -r depobs/requirements-dev.txt
      - run:
          name: run unit tests with coverage (no DB)
          command: |
            coverage run -m pytest -m unit
            coverage report
            coverage html
      - run:
          name: generate coverage reports
          command: |
            coverage report
            coverage html
            mv /tmp/htmlcov/ unit-test-htmlcov
      - run:
          name: send results to coveralls
          command: coveralls
      - store_artifacts:
          path: unit-test-htmlcov

  build-images:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: write a version.json to CWD
          command: |
            CI=1 ./util/write_version_json.sh > version.json
      - run:
          name: build images
          command: make build-image build-scan-images
      - run:
          name: save built images to cache
          # "${DOCKERHUB_REPO}:node-10"  "${DOCKERHUB_REPO}:rust-1"
          command: docker save "${DOCKERHUB_REPO}:latest" "${DOCKERHUB_REPO}:node-12" | gzip -c > /tmp/docker.tgz
      - save_cache:
          key: v1-{{ .Branch }}-{{ epoch }}
          paths:
            - /tmp/docker.tgz

  # test-images:
  #   docker:
  #     - image: circleci/python:buster
  #   steps:
  #     - kube-orb/install-kubectl
  #     - checkout
  #     - setup_remote_docker
  #     - restore_cache:
  #         key: v1-{{.Branch}}
  #     - run:
  #         name: Restore Docker image cache
  #         command: gunzip -c /tmp/docker.tgz | docker load
  #     - kube-orb/create-or-update-resource:
  #         resource-file-path: kubernetes/deployment.yaml
  #         show-kubectl-command: true
  #     - run:
  #         name: show k8s objs
  #         command: kubectl get all
  #     - run:
  #         name: run unit and integration tests with coverage
  #         command: |
  #           CI=1 ./util/run_tests_with_coverage.sh -v
  #     - run:
  #         name: run e2e test
  #         command: |
  #           kubectl exec svc/api /app/bin/e2e_test.sh http://localhost:8000 /tmp || (
  #               kubectl logs svc/worker;
  #               kubectl logs svc/api;
  #               exit 1
  #           )
  #     - kube-orb/delete-resource:
  #         resource-file-path: kubernetes/deployment.yaml
  #         now: true
  #         wait: true
  #     - run:
  #         name: mv coverage reports
  #         command: |
  #           mv htmlcov/ test-images-htmlcov
  #     - store_artifacts:
  #         path: test-images-htmlcov

  deploy:
    docker:
      - image: circleci/python:buster
    steps:
      - checkout
      - setup_remote_docker
      - restore_cache:
          key: v1-{{.Branch}}
      - run:
          name: Restore Docker image cache
          command: gunzip -c /tmp/docker.tgz | docker load
      - run:
          name: deploy to Dockerhub
          command: |
            # deploy master and scan envs
            if [ "${CIRCLE_BRANCH}" == "master" ]; then
              # push master tags
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              # node-10 rust-1
              for tag in latest node-12; do
                  echo "${DOCKERHUB_REPO}:${tag}"
                  docker push "${DOCKERHUB_REPO}:${tag}"
              done;
            elif  [ ! -z "${CIRCLE_TAG}" ]; then
              # deploy a release tag
              docker login -u $DOCKER_USER -p $DOCKER_PASS
              echo "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker tag "${DOCKERHUB_REPO}:latest" "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
              docker push "${DOCKERHUB_REPO}:${CIRCLE_TAG}"
            fi

workflows:
  version: 2
  check-readme-local-dev:
    jobs:
      - check-format:
        filters:
          tags:
            only: /.*/

      - check-types:
        filters:
          tags:
            only: /.*/

      - unit-test:
        filters:
          tags:
            only: /.*/

      - build-images:
          filters:
            tags:
              only: /.*/

      # - test-images:
      #     requires:
      #       - build-images
      #     filters:
      #       tags:
      #         only: /.*/

      - deploy:
          requires:
            - check-format
            - check-types
            - unit-test
            # - test-images
            - build-images
          filters:
            tags:
              # only upload the docker container on semver tags
              only: /[0-9]\.[0-9]+\.[0-9]+/
            branches:
              only: master
